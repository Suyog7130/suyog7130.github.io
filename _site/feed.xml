<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://suyog7130.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://suyog7130.github.io/" rel="alternate" type="text/html" /><updated>2023-10-21T16:45:47+05:30</updated><id>https://suyog7130.github.io/feed.xml</id><title type="html">Suyog Garg</title><subtitle>personal description</subtitle><author><name>Suyog Garg</name><email>suyog7130@gmail.com</email></author><entry><title type="html">How to use Sphinx Documentation</title><link href="https://suyog7130.github.io/posts/2023/02/blog-post-4/" rel="alternate" type="text/html" title="How to use Sphinx Documentation" /><published>2023-02-13T00:00:00+05:30</published><updated>2023-02-13T00:00:00+05:30</updated><id>https://suyog7130.github.io/posts/2023/02/blog-post-4</id><content type="html" xml:base="https://suyog7130.github.io/posts/2023/02/blog-post-4/">Sphinx documentation build also requires configuring the source pathname inside `docs/conf.py`

So, the process for building documentation is:

- Run `sphinx-quickstart`, e.g. ``sphinx-quickstart docs/ -p xmmPipeline -a Suyog –ext-autodoc –ext-napolean –ext-doctest –ext-intersphinx –ext-todoint``

- Edit `docs/conf.py` file to have the correct documentation path.

- Run `autodoc` to automatically import the docstring from the code modules and scripts, e.g. ``sphinx-apidoc -o ./docs ../src/xmmPipeline/ –force``

- Use `make html` for HTML, `make latex` for LaTeX, `make latexpdf` for PDF and `make epub` for epub

Example `conf.py` for Sphinx is as follows:


```python
# Configuration file for the Sphinx documentation builder.
#
# For the full list of built-in configuration values, see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
sys.path.insert(0, os.path.abspath('../src/'))


# -- Project information -----------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information

project = 'xmmPipeline'
copyright = '2023, Suyog'
author = 'Suyog'

# -- General configuration ---------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration

extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.napoleon',
    'sphinx.ext.todo',
]


# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']


# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']



# -- Options for HTML output -------------------------------------------------
# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output

html_theme = 'alabaster'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named &quot;default.css&quot; will overwrite the builtin &quot;default.css&quot;.
html_static_path = ['_static']

# -- Options for intersphinx extension ---------------------------------------
# https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html#configuration

intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
}

# -- Options for todo extension ----------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/extensions/todo.html#configuration

todo_include_todos = True
```</content><author><name>Suyog Garg</name><email>suyog7130@gmail.com</email></author><category term="sphinx" /><category term="python" /><category term="documentation" /><summary type="html">Sphinx documentation build also requires configuring the source pathname inside docs/conf.py</summary></entry><entry><title type="html">Customizing Mac Terminal</title><link href="https://suyog7130.github.io/posts/2023/02/blog-post-3/" rel="alternate" type="text/html" title="Customizing Mac Terminal" /><published>2023-02-03T00:00:00+05:30</published><updated>2023-02-03T00:00:00+05:30</updated><id>https://suyog7130.github.io/posts/2023/02/blog-post-3</id><content type="html" xml:base="https://suyog7130.github.io/posts/2023/02/blog-post-3/">Changed the Mac terminal to `iterm2` and then made numerous customizations to the `oh-my-zsh` plugin. The `~/.zshrc` looks like the following after these modifications:

```bash
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=&quot;$HOME/.oh-my-zsh&quot;

# Set name of the theme to load --- if set to &quot;random&quot;, it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME=&quot;robbyrussell&quot;

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( &quot;robbyrussell&quot; &quot;agnoster&quot; )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE=&quot;true&quot;

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE=&quot;true&quot;

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=&quot;true&quot;

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS=&quot;true&quot;

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE=&quot;true&quot;

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION=&quot;true&quot;

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS=&quot;%F{yellow}waiting...%f&quot;
# Caution: this setting can cause issues with multiline prompts in zsh &lt; 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS=&quot;true&quot;

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY=&quot;true&quot;

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# &quot;mm/dd/yyyy&quot;|&quot;dd.mm.yyyy&quot;|&quot;yyyy-mm-dd&quot;
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS=&quot;mm/dd/yyyy&quot;

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git
    zsh-syntax-highlighting
    zsh-autosuggestions
    # fzf
)


# User configuration

# export MANPATH=&quot;/usr/local/man:$MANPATH&quot;

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS=&quot;-arch x86_64&quot;

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig=&quot;mate ~/.zshrc&quot;
# alias ohmyzsh=&quot;mate ~/.oh-my-zsh&quot;

# add syntax highlighting to the list of plugins in your ~/.zshrc file
# update plugins in your ~/.zshrc file
# update your ~/.zshrc file
FZF_BASE=&quot;$HOME/.fzf&quot;

source $ZSH/oh-my-zsh.sh

# Aliases

# python
alias python=python3

# git
alias gs=&quot;git status&quot;

# map exa commands to normal ls commands
alias ll=&quot;exa -l -g --icons&quot;
alias li=&quot;exa --icons&quot;
alias lt=&quot;exa --tree --icons -a -I '.git|__pycache__|.mypy_cache|.ipynb_checkpoints'&quot;

# show file previews for fzf using bat
alias fp=&quot;fzf --preview 'bat --style=numbers --color=always --line-range :500 {}'&quot;

# starship prompt
alias gt=&quot;starship toggle gcloud disabled&quot; # toggle gcloud info on the prompt


# use Starship prompt in zsh
eval &quot;$(starship init zsh)&quot;

[ -f ~/.fzf.zsh ] &amp;&amp; source ~/.fzf.zsh
```

Reference: [configure_terminal\_for\_data\_science\_with\_oh\_my\_zsh/](https://engineeringfordatascience.com/posts/configure_terminal_for_data_science_with_oh_my_zsh/)</content><author><name>Suyog Garg</name><email>suyog7130@gmail.com</email></author><category term="terminal" /><category term="git" /><category term="zsh" /><summary type="html">Changed the Mac terminal to iterm2 and then made numerous customizations to the oh-my-zsh plugin. The ~/.zshrc looks like the following after these modifications:</summary></entry><entry><title type="html">`.gitignore` file</title><link href="https://suyog7130.github.io/posts/2023/01/blog-post-2/" rel="alternate" type="text/html" title="`.gitignore` file" /><published>2023-01-23T00:00:00+05:30</published><updated>2023-01-23T00:00:00+05:30</updated><id>https://suyog7130.github.io/posts/2023/01/blog-post-2</id><content type="html" xml:base="https://suyog7130.github.io/posts/2023/01/blog-post-2/">To ignore all files larger than 100MB:

```bash
find ./* -size +100M | cat &gt;&gt; .gitignore
```

To ignore all files larger than 100MB but with pathnames not contianing &quot;data&quot; and without repeating already added large file names:

```bash
find ./*work*/ -not -path **data**  -size +100M | sed 's|^\./||g' | cat &gt;&gt; .gitignore; awk '!NF || !seen[$0]++' .gitignore
```

An Example `.gitignore` file with other useful settings:

```bash
  GNU nano 2.9.3                                           .gitignore

# Blocklist files/folders in same directory as the .gitignore file
/*
*data/*
*work*/*data*/*
*gh18-work/models/*
*gh18-work/results/*

# Includelist some files
!.gitignore
!README.md
!**.sh

# Ignore all files named .DS_Store or ending with .log
**/.DS_Store
**.log

# Includelist folder/a/b1/ and folder/a/b2/ trailing &quot;/&quot; is optional for folders, may match file though. &quot;/&quot; is NOT
# optional when followed by a *
!*work*/
!*work*/*

# Adding to the above, this also works...
#!/folder/a/deeply /folder/a/deeply/* !/folder/a/deeply/nested /folder/a/deeply/nested/*
#!/folder/a/deeply/nested/subfolder

# Ignore all files larger than 150MB
g2net-work/g2net-detecting-continuous-gravitational-waves.zip
mlgwsc-work/injections4_1.25s.npy
mlgwsc-work/real_noise_file.hdf

```

Useful links:

- [https://git-scm.com/docs/gitignore](https://git-scm.com/docs/gitignore)
- [https://stackoverflow.com/questions/987142/make-gitignore-ignore-everything-except-a-few-files](https://stackoverflow.com/questions/987142/make-gitignore-ignore-everything-except-a-few-files)
- [https://stackoverflow.com/questions/4035779/gitignore-by-file-size](https://stackoverflow.com/questions/4035779/gitignore-by-file-size)


---</content><author><name>Suyog Garg</name><email>suyog7130@gmail.com</email></author><category term="terminal" /><category term="git" /><summary type="html">To ignore all files larger than 100MB:</summary></entry><entry><title type="html">Linux Terminal Commands</title><link href="https://suyog7130.github.io/posts/2021/05/blog-post-1/" rel="alternate" type="text/html" title="Linux Terminal Commands" /><published>2021-05-09T00:00:00+05:30</published><updated>2021-05-09T00:00:00+05:30</updated><id>https://suyog7130.github.io/posts/2021/05/blog-post-1</id><content type="html" xml:base="https://suyog7130.github.io/posts/2021/05/blog-post-1/">These are some useful Linux Terminal Commands for productivity:

Commands using `ls` etc.
-----

use | to 
---   | --- 
`ls -ltr`                 | list files in reverse modification history order with details.
`ls -ltr | tail -n 5` | list only the last (tailing) 5 files from the list. Change 5 to any integer.
`ls | head -n 5`    | list only the first 5 files from the list.
`rename 's/original/new/' *` | To rename all filenames and directories containing &quot;original&quot; string to &quot;new&quot; string. To recursively do this in sub-directories, use `**/*`. See: [here](https://unix.stackexchange.com/questions/175135/how-to-rename-multiple-files-by-replacing-string-in-file-name-this-string-conta) and [here](https://ja.stackoverflow.com/questions/90042/rename-%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%81%AE%E3%83%AA%E3%83%8D%E3%83%BC%E3%83%A0%E3%81%A7%E3%82%A8%E3%83%A9%E3%83%BC-substitution-replacement-not-terminated-at-user-su)
`for dir in */; do mkdir -- &quot;$dir&quot;/{tmp1,foo,bar,qux}; done` | To create directories within sub-directories in one go!



For opening image files from Terminal
-----

Opening files directly through the Terminal is both easy and fast. Additionally, these commands are useful to view resulting files when using `subprocess.run` in Python to run Terminal commands.

use | to
---   | ---
`evince` *filename* | open PDF files and PS document files.
`eog` *filename*      | open image files in normal image formats like JPEG, JPG, PNG etc.
`ds9` *filename*      | open FITS format image files. *Requires DS9*
`fv` *filename*        | open FITS format event lists and datasets. *Requires initiation of NASA's `heasarc`*

---</content><author><name>Suyog Garg</name><email>suyog7130@gmail.com</email></author><category term="terminal" /><category term="commands" /><summary type="html">These are some useful Linux Terminal Commands for productivity:</summary></entry></feed>